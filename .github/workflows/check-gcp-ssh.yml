name: Build, Publish, and Deploy Flask Container to GCP VM

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Image path in GitHub Container Registry (GHCR). Adjust if you prefer Docker Hub.
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/flask-app
      CONTAINER_NAME: flask-app
      VM_HOST: 34.171.9.157
      VM_USER: github-actions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on VM via SSH (install Docker if needed, login to GHCR, pull & run)
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh ${{ env.VM_USER }}@${{ env.VM_HOST }} "
            set -e
            if ! command -v docker >/dev/null 2>&1; then
              echo 'Installing Docker via get.docker.com script...'
              curl -fsSL https://get.docker.com | sh
            fi

            echo 'Logging into GHCR...'
            echo '${GHCR_TOKEN}' | sudo docker login ghcr.io -u '${GHCR_USER}' --password-stdin

            echo 'Pulling image...'
            sudo docker pull ${IMAGE_NAME}:latest

            echo 'Stopping existing container if running...'
            if sudo docker ps -q -f name=${CONTAINER_NAME} >/dev/null; then
              sudo docker stop ${CONTAINER_NAME} || true
              sudo docker rm ${CONTAINER_NAME} || true
            fi

            echo 'Starting new container...'
            sudo docker run -d --restart unless-stopped --name ${CONTAINER_NAME} -p 5000:5000 ${IMAGE_NAME}:latest
          "